// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: config/cache/v1alpha1/cache.proto

package v1alpha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// Describes the desired configuration for a Cache. Only DB Cache Service is supported atm
type CacheSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource profile for the cache provider
	Resources *Resources `protobuf:"bytes,1,opt,name=resources,proto3" json:"resources,omitempty"`
	// DatasourceRef or a ServiceBindingRef (TODO clarify)
	DataSource *DataSourceSpec `protobuf:"bytes,2,opt,name=dataSource,proto3" json:"dataSource,omitempty"`
}

func (x *CacheSpec) Reset() {
	*x = CacheSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_cache_v1alpha1_cache_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CacheSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheSpec) ProtoMessage() {}

func (x *CacheSpec) ProtoReflect() protoreflect.Message {
	mi := &file_config_cache_v1alpha1_cache_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheSpec.ProtoReflect.Descriptor instead.
func (*CacheSpec) Descriptor() ([]byte, []int) {
	return file_config_cache_v1alpha1_cache_proto_rawDescGZIP(), []int{0}
}

func (x *CacheSpec) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *CacheSpec) GetDataSource() *DataSourceSpec {
	if x != nil {
		return x.DataSource
	}
	return nil
}

// Document representation of a cache and all the related rules
type CacheConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CacheSpec *CacheSpec `protobuf:"bytes,1,opt,name=cacheSpec,proto3" json:"cacheSpec,omitempty"`
	// map of all the Eager rules attached to this cache. Key should be of the for
	// namespace.name (needs to be a string, NamespacedRef cannot be used).
	EagerCacheRuleSpecs map[string]*EagerCacheRuleSpec `protobuf:"bytes,2,rep,name=eagerCacheRuleSpecs,proto3" json:"eagerCacheRuleSpecs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// map of all the Lazy rules attached to this cache. Key should be of the for
	// namespace.name.
	LazyCacheRuleSpecs map[string]*LazyCacheRuleSpec `protobuf:"bytes,3,rep,name=LazyCacheRuleSpecs,proto3" json:"LazyCacheRuleSpecs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CacheConf) Reset() {
	*x = CacheConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_cache_v1alpha1_cache_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CacheConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheConf) ProtoMessage() {}

func (x *CacheConf) ProtoReflect() protoreflect.Message {
	mi := &file_config_cache_v1alpha1_cache_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheConf.ProtoReflect.Descriptor instead.
func (*CacheConf) Descriptor() ([]byte, []int) {
	return file_config_cache_v1alpha1_cache_proto_rawDescGZIP(), []int{1}
}

func (x *CacheConf) GetCacheSpec() *CacheSpec {
	if x != nil {
		return x.CacheSpec
	}
	return nil
}

func (x *CacheConf) GetEagerCacheRuleSpecs() map[string]*EagerCacheRuleSpec {
	if x != nil {
		return x.EagerCacheRuleSpecs
	}
	return nil
}

func (x *CacheConf) GetLazyCacheRuleSpecs() map[string]*LazyCacheRuleSpec {
	if x != nil {
		return x.LazyCacheRuleSpecs
	}
	return nil
}

var File_config_cache_v1alpha1_cache_proto protoreflect.FileDescriptor

var file_config_cache_v1alpha1_cache_proto_rawDesc = []byte{
	0x0a, 0x21, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x20, 0x67, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x6e, 0x61, 0x70, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x21, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa8, 0x01, 0x0a, 0x09, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x49, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x69, 0x6e, 0x67,
	0x65, 0x72, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x12, 0x50, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x6e,
	0x61, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x22, 0xbd, 0x04, 0x0a, 0x09, 0x43, 0x61, 0x63, 0x68, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x12, 0x49, 0x0a, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x53, 0x70, 0x65, 0x63, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x6e, 0x61,
	0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x76, 0x0a, 0x13,
	0x65, 0x61, 0x67, 0x65, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x67, 0x69, 0x6e, 0x67,
	0x65, 0x72, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x2e, 0x45, 0x61, 0x67, 0x65, 0x72, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x13, 0x65, 0x61, 0x67, 0x65, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x73, 0x12, 0x73, 0x0a, 0x12, 0x4c, 0x61, 0x7a, 0x79, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x43, 0x2e, 0x67, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x2e, 0x4c, 0x61,
	0x7a, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x4c, 0x61, 0x7a, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x73, 0x1a, 0x7c, 0x0a, 0x18, 0x45, 0x61, 0x67,
	0x65, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x73,
	0x6e, 0x61, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x61, 0x67, 0x65, 0x72, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x7a, 0x0a, 0x17, 0x4c, 0x61, 0x7a, 0x79, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x49, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x6e, 0x61, 0x70,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x61, 0x7a, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x42, 0x02, 0x50, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_config_cache_v1alpha1_cache_proto_rawDescOnce sync.Once
	file_config_cache_v1alpha1_cache_proto_rawDescData = file_config_cache_v1alpha1_cache_proto_rawDesc
)

func file_config_cache_v1alpha1_cache_proto_rawDescGZIP() []byte {
	file_config_cache_v1alpha1_cache_proto_rawDescOnce.Do(func() {
		file_config_cache_v1alpha1_cache_proto_rawDescData = protoimpl.X.CompressGZIP(file_config_cache_v1alpha1_cache_proto_rawDescData)
	})
	return file_config_cache_v1alpha1_cache_proto_rawDescData
}

var file_config_cache_v1alpha1_cache_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_config_cache_v1alpha1_cache_proto_goTypes = []interface{}{
	(*CacheSpec)(nil),          // 0: gingersnap.config.cache.v1alpha1.CacheSpec
	(*CacheConf)(nil),          // 1: gingersnap.config.cache.v1alpha1.CacheConf
	nil,                        // 2: gingersnap.config.cache.v1alpha1.CacheConf.EagerCacheRuleSpecsEntry
	nil,                        // 3: gingersnap.config.cache.v1alpha1.CacheConf.LazyCacheRuleSpecsEntry
	(*Resources)(nil),          // 4: gingersnap.config.cache.v1alpha1.Resources
	(*DataSourceSpec)(nil),     // 5: gingersnap.config.cache.v1alpha1.DataSourceSpec
	(*EagerCacheRuleSpec)(nil), // 6: gingersnap.config.cache.v1alpha1.EagerCacheRuleSpec
	(*LazyCacheRuleSpec)(nil),  // 7: gingersnap.config.cache.v1alpha1.LazyCacheRuleSpec
}
var file_config_cache_v1alpha1_cache_proto_depIdxs = []int32{
	4, // 0: gingersnap.config.cache.v1alpha1.CacheSpec.resources:type_name -> gingersnap.config.cache.v1alpha1.Resources
	5, // 1: gingersnap.config.cache.v1alpha1.CacheSpec.dataSource:type_name -> gingersnap.config.cache.v1alpha1.DataSourceSpec
	0, // 2: gingersnap.config.cache.v1alpha1.CacheConf.cacheSpec:type_name -> gingersnap.config.cache.v1alpha1.CacheSpec
	2, // 3: gingersnap.config.cache.v1alpha1.CacheConf.eagerCacheRuleSpecs:type_name -> gingersnap.config.cache.v1alpha1.CacheConf.EagerCacheRuleSpecsEntry
	3, // 4: gingersnap.config.cache.v1alpha1.CacheConf.LazyCacheRuleSpecs:type_name -> gingersnap.config.cache.v1alpha1.CacheConf.LazyCacheRuleSpecsEntry
	6, // 5: gingersnap.config.cache.v1alpha1.CacheConf.EagerCacheRuleSpecsEntry.value:type_name -> gingersnap.config.cache.v1alpha1.EagerCacheRuleSpec
	7, // 6: gingersnap.config.cache.v1alpha1.CacheConf.LazyCacheRuleSpecsEntry.value:type_name -> gingersnap.config.cache.v1alpha1.LazyCacheRuleSpec
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_config_cache_v1alpha1_cache_proto_init() }
func file_config_cache_v1alpha1_cache_proto_init() {
	if File_config_cache_v1alpha1_cache_proto != nil {
		return
	}
	file_config_cache_v1alpha1_rules_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_config_cache_v1alpha1_cache_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CacheSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_cache_v1alpha1_cache_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CacheConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_config_cache_v1alpha1_cache_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_config_cache_v1alpha1_cache_proto_goTypes,
		DependencyIndexes: file_config_cache_v1alpha1_cache_proto_depIdxs,
		MessageInfos:      file_config_cache_v1alpha1_cache_proto_msgTypes,
	}.Build()
	File_config_cache_v1alpha1_cache_proto = out.File
	file_config_cache_v1alpha1_cache_proto_rawDesc = nil
	file_config_cache_v1alpha1_cache_proto_goTypes = nil
	file_config_cache_v1alpha1_cache_proto_depIdxs = nil
}
