// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: config/cache/v1alpha1/cache.proto

package v1alpha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:validation:Type=string
// The type of cache deployment
type CacheDeploymentType int32

const (
	CacheDeploymentType_LOCAL   CacheDeploymentType = 0
	CacheDeploymentType_CLUSTER CacheDeploymentType = 1
)

// Enum value maps for CacheDeploymentType.
var (
	CacheDeploymentType_name = map[int32]string{
		0: "LOCAL",
		1: "CLUSTER",
	}
	CacheDeploymentType_value = map[string]int32{
		"LOCAL":   0,
		"CLUSTER": 1,
	}
)

func (x CacheDeploymentType) Enum() *CacheDeploymentType {
	p := new(CacheDeploymentType)
	*p = x
	return p
}

func (x CacheDeploymentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CacheDeploymentType) Descriptor() protoreflect.EnumDescriptor {
	return file_config_cache_v1alpha1_cache_proto_enumTypes[0].Descriptor()
}

func (CacheDeploymentType) Type() protoreflect.EnumType {
	return &file_config_cache_v1alpha1_cache_proto_enumTypes[0]
}

func (x CacheDeploymentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CacheDeploymentType.Descriptor instead.
func (CacheDeploymentType) EnumDescriptor() ([]byte, []int) {
	return file_config_cache_v1alpha1_cache_proto_rawDescGZIP(), []int{0}
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:validation:Type=string
// Type of the database in format DBTYPE_VERSION
type DBType int32

const (
	DBType_POSTGRES_14     DBType = 0
	DBType_MYSQL_8         DBType = 1
	DBType_SQL_SERVER_2019 DBType = 2
)

// Enum value maps for DBType.
var (
	DBType_name = map[int32]string{
		0: "POSTGRES_14",
		1: "MYSQL_8",
		2: "SQL_SERVER_2019",
	}
	DBType_value = map[string]int32{
		"POSTGRES_14":     0,
		"MYSQL_8":         1,
		"SQL_SERVER_2019": 2,
	}
)

func (x DBType) Enum() *DBType {
	p := new(DBType)
	*p = x
	return p
}

func (x DBType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DBType) Descriptor() protoreflect.EnumDescriptor {
	return file_config_cache_v1alpha1_cache_proto_enumTypes[1].Descriptor()
}

func (DBType) Type() protoreflect.EnumType {
	return &file_config_cache_v1alpha1_cache_proto_enumTypes[1]
}

func (x DBType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DBType.Descriptor instead.
func (DBType) EnumDescriptor() ([]byte, []int) {
	return file_config_cache_v1alpha1_cache_proto_rawDescGZIP(), []int{1}
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// Describes the desired configuration for a Cache. Only DB Cache Service is supported atm
type CacheSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource profile for the cache provider
	Deployment *CacheDeploymentSpec `protobuf:"bytes,1,opt,name=deployment,proto3" json:"deployment,omitempty"`
	// Resource profile for the db-syncer
	DbSyncer *DBSyncerDeploymentSpec `protobuf:"bytes,2,opt,name=db_syncer,json=dbSyncer,proto3" json:"dbSyncer,omitempty"`
	// DatasourceRef or a ServiceBindingRef (TODO clarify)
	DataSource *DataSourceSpec `protobuf:"bytes,3,opt,name=data_source,json=dataSource,proto3" json:"dataSource,omitempty"`
}

func (x *CacheSpec) Reset() {
	*x = CacheSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_cache_v1alpha1_cache_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CacheSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheSpec) ProtoMessage() {}

func (x *CacheSpec) ProtoReflect() protoreflect.Message {
	mi := &file_config_cache_v1alpha1_cache_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheSpec.ProtoReflect.Descriptor instead.
func (*CacheSpec) Descriptor() ([]byte, []int) {
	return file_config_cache_v1alpha1_cache_proto_rawDescGZIP(), []int{0}
}

func (x *CacheSpec) GetDeployment() *CacheDeploymentSpec {
	if x != nil {
		return x.Deployment
	}
	return nil
}

func (x *CacheSpec) GetDbSyncer() *DBSyncerDeploymentSpec {
	if x != nil {
		return x.DbSyncer
	}
	return nil
}

func (x *CacheSpec) GetDataSource() *DataSourceSpec {
	if x != nil {
		return x.DataSource
	}
	return nil
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// Describes the spec of the cache provider
type CacheDeploymentSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// +kubebuilder:validation:Enum=LOCAL;CLUSTER
	// The type of Cache deployment
	Type CacheDeploymentType `protobuf:"varint,1,opt,name=type,proto3,enum=gingersnap.config.cache.v1alpha1.CacheDeploymentType" json:"type,omitempty"`
	// Resource profile for cache pods
	Resources *Resources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	// Max number of replicas for type CLUSTER
	Replicas int32 `protobuf:"varint,3,opt,name=replicas,proto3" json:"replicas,omitempty"`
}

func (x *CacheDeploymentSpec) Reset() {
	*x = CacheDeploymentSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_cache_v1alpha1_cache_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CacheDeploymentSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheDeploymentSpec) ProtoMessage() {}

func (x *CacheDeploymentSpec) ProtoReflect() protoreflect.Message {
	mi := &file_config_cache_v1alpha1_cache_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheDeploymentSpec.ProtoReflect.Descriptor instead.
func (*CacheDeploymentSpec) Descriptor() ([]byte, []int) {
	return file_config_cache_v1alpha1_cache_proto_rawDescGZIP(), []int{1}
}

func (x *CacheDeploymentSpec) GetType() CacheDeploymentType {
	if x != nil {
		return x.Type
	}
	return CacheDeploymentType_LOCAL
}

func (x *CacheDeploymentSpec) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *CacheDeploymentSpec) GetReplicas() int32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// Describes the spec of the db-syncer deployment
type DBSyncerDeploymentSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource profile for db-syncer pods
	Resources *Resources `protobuf:"bytes,1,opt,name=resources,proto3" json:"resources,omitempty"`
}

func (x *DBSyncerDeploymentSpec) Reset() {
	*x = DBSyncerDeploymentSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_cache_v1alpha1_cache_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBSyncerDeploymentSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBSyncerDeploymentSpec) ProtoMessage() {}

func (x *DBSyncerDeploymentSpec) ProtoReflect() protoreflect.Message {
	mi := &file_config_cache_v1alpha1_cache_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBSyncerDeploymentSpec.ProtoReflect.Descriptor instead.
func (*DBSyncerDeploymentSpec) Descriptor() ([]byte, []int) {
	return file_config_cache_v1alpha1_cache_proto_rawDescGZIP(), []int{2}
}

func (x *DBSyncerDeploymentSpec) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// Describes a resources profile required for a workload
type Resources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests *ResourceQuantity `protobuf:"bytes,1,opt,name=requests,proto3" json:"requests,omitempty"`
	Limits   *ResourceQuantity `protobuf:"bytes,2,opt,name=limits,proto3" json:"limits,omitempty"`
}

func (x *Resources) Reset() {
	*x = Resources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_cache_v1alpha1_cache_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resources) ProtoMessage() {}

func (x *Resources) ProtoReflect() protoreflect.Message {
	mi := &file_config_cache_v1alpha1_cache_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resources.ProtoReflect.Descriptor instead.
func (*Resources) Descriptor() ([]byte, []int) {
	return file_config_cache_v1alpha1_cache_proto_rawDescGZIP(), []int{3}
}

func (x *Resources) GetRequests() *ResourceQuantity {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *Resources) GetLimits() *ResourceQuantity {
	if x != nil {
		return x.Limits
	}
	return nil
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// Describes a resource quantities
type ResourceQuantity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO: use the k8s type for quantity. Check the Java side
	// k8s.io.apimachinery.pkg.api.resource.Quantity memory = 1;
	// Memory quantity
	Memory string `protobuf:"bytes,1,opt,name=memory,proto3" json:"memory,omitempty"`
	// TODO: use the k8s type for quantity. Check the Java side
	// k8s.io.apimachinery.pkg.api.resource.Quantity cpu = 2;
	// CPU quantity
	Cpu string `protobuf:"bytes,2,opt,name=cpu,proto3" json:"cpu,omitempty"`
}

func (x *ResourceQuantity) Reset() {
	*x = ResourceQuantity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_cache_v1alpha1_cache_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceQuantity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceQuantity) ProtoMessage() {}

func (x *ResourceQuantity) ProtoReflect() protoreflect.Message {
	mi := &file_config_cache_v1alpha1_cache_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceQuantity.ProtoReflect.Descriptor instead.
func (*ResourceQuantity) Descriptor() ([]byte, []int) {
	return file_config_cache_v1alpha1_cache_proto_rawDescGZIP(), []int{4}
}

func (x *ResourceQuantity) GetMemory() string {
	if x != nil {
		return x.Memory
	}
	return ""
}

func (x *ResourceQuantity) GetCpu() string {
	if x != nil {
		return x.Cpu
	}
	return ""
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// Describes a data source connection. A map is available for passing implementation specific
// properties.
type DataSourceSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// +kubebuilder:validation:Enum=POSTGRES_14;MYSQL_8;SQL_SERVER_2019
	// Type and version of the underlaying DB. Needed to decide which drivers need to be used
	DbType *DBType `protobuf:"varint,1,opt,name=db_type,json=dbType,proto3,enum=gingersnap.config.cache.v1alpha1.DBType,oneof" json:"dbType,omitempty"`
	// Additional properties. DB specific
	ConnectionProperties map[string]string `protobuf:"bytes,2,rep,name=connection_properties,json=connectionProperties,proto3" json:"connectionProperties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Reference to a local secret containing DB connection details.
	SecretRef *LocalObjectReference `protobuf:"bytes,3,opt,name=secret_ref,json=secretRef,proto3" json:"secretRef,omitempty"`
	// Reference to ServiceBinding provider
	ServiceProviderRef *ServiceRef `protobuf:"bytes,4,opt,name=service_provider_ref,json=serviceProviderRef,proto3" json:"serviceProviderRef,omitempty"`
}

func (x *DataSourceSpec) Reset() {
	*x = DataSourceSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_cache_v1alpha1_cache_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSourceSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceSpec) ProtoMessage() {}

func (x *DataSourceSpec) ProtoReflect() protoreflect.Message {
	mi := &file_config_cache_v1alpha1_cache_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceSpec.ProtoReflect.Descriptor instead.
func (*DataSourceSpec) Descriptor() ([]byte, []int) {
	return file_config_cache_v1alpha1_cache_proto_rawDescGZIP(), []int{5}
}

func (x *DataSourceSpec) GetDbType() DBType {
	if x != nil && x.DbType != nil {
		return *x.DbType
	}
	return DBType_POSTGRES_14
}

func (x *DataSourceSpec) GetConnectionProperties() map[string]string {
	if x != nil {
		return x.ConnectionProperties
	}
	return nil
}

func (x *DataSourceSpec) GetSecretRef() *LocalObjectReference {
	if x != nil {
		return x.SecretRef
	}
	return nil
}

func (x *DataSourceSpec) GetServiceProviderRef() *ServiceRef {
	if x != nil {
		return x.ServiceProviderRef
	}
	return nil
}

// LocalObjectRef contains enough information to let you locate the referenced object inside the same namespace.
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type LocalObjectReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *LocalObjectReference) Reset() {
	*x = LocalObjectReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_cache_v1alpha1_cache_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalObjectReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalObjectReference) ProtoMessage() {}

func (x *LocalObjectReference) ProtoReflect() protoreflect.Message {
	mi := &file_config_cache_v1alpha1_cache_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalObjectReference.ProtoReflect.Descriptor instead.
func (*LocalObjectReference) Descriptor() ([]byte, []int) {
	return file_config_cache_v1alpha1_cache_proto_rawDescGZIP(), []int{6}
}

func (x *LocalObjectReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// Describes a ServiceBinding provider in the Cache namespace
type ServiceRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// API version of the referent.
	ApiVersion string `protobuf:"bytes,1,opt,name=api_version,json=apiVersion,proto3" json:"apiVersion,omitempty"`
	// Kind of the referent.
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// Name of the referent.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ServiceRef) Reset() {
	*x = ServiceRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_cache_v1alpha1_cache_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceRef) ProtoMessage() {}

func (x *ServiceRef) ProtoReflect() protoreflect.Message {
	mi := &file_config_cache_v1alpha1_cache_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceRef.ProtoReflect.Descriptor instead.
func (*ServiceRef) Descriptor() ([]byte, []int) {
	return file_config_cache_v1alpha1_cache_proto_rawDescGZIP(), []int{7}
}

func (x *ServiceRef) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *ServiceRef) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ServiceRef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Document representation of a cache and all the related rules
type CacheConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CacheSpec *CacheSpec `protobuf:"bytes,1,opt,name=cache_spec,json=cacheSpec,proto3" json:"cacheSpec,omitempty"`
	// map of all the Eager rules attached to this cache. Key should be of the for
	// namespace.name (needs to be a string, NamespacedRef cannot be used).
	EagerCacheRuleSpecs map[string]*EagerCacheRuleSpec `protobuf:"bytes,2,rep,name=eager_cache_rule_specs,json=eagerCacheRuleSpecs,proto3" json:"eagerCacheRuleSpecs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// map of all the Lazy rules attached to this cache. Key should be of the for
	// namespace.name.
	LazyCacheRuleSpecs map[string]*LazyCacheRuleSpec `protobuf:"bytes,3,rep,name=lazy_cache_rule_specs,json=lazyCacheRuleSpecs,proto3" json:"lazyCacheRuleSpecs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CacheConf) Reset() {
	*x = CacheConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_cache_v1alpha1_cache_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CacheConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheConf) ProtoMessage() {}

func (x *CacheConf) ProtoReflect() protoreflect.Message {
	mi := &file_config_cache_v1alpha1_cache_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheConf.ProtoReflect.Descriptor instead.
func (*CacheConf) Descriptor() ([]byte, []int) {
	return file_config_cache_v1alpha1_cache_proto_rawDescGZIP(), []int{8}
}

func (x *CacheConf) GetCacheSpec() *CacheSpec {
	if x != nil {
		return x.CacheSpec
	}
	return nil
}

func (x *CacheConf) GetEagerCacheRuleSpecs() map[string]*EagerCacheRuleSpec {
	if x != nil {
		return x.EagerCacheRuleSpecs
	}
	return nil
}

func (x *CacheConf) GetLazyCacheRuleSpecs() map[string]*LazyCacheRuleSpec {
	if x != nil {
		return x.LazyCacheRuleSpecs
	}
	return nil
}

var File_config_cache_v1alpha1_cache_proto protoreflect.FileDescriptor

var file_config_cache_v1alpha1_cache_proto_rawDesc = []byte{
	0x0a, 0x21, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x20, 0x67, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x6e, 0x61, 0x70, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x21, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8c, 0x02, 0x0a, 0x09, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x55, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x69, 0x6e,
	0x67, 0x65, 0x72, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x55, 0x0a,
	0x09, 0x64, 0x62, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x67, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x44, 0x42, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x72, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x08, 0x64, 0x62, 0x53, 0x79,
	0x6e, 0x63, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x69, 0x6e, 0x67,
	0x65, 0x72, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0a, 0x64, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xc7, 0x01, 0x0a, 0x13, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x49, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e,
	0x67, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x09, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x67, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x73, 0x22, 0x63, 0x0a, 0x16, 0x44, 0x42, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x72, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x49, 0x0a, 0x09, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x67, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x09, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x73,
	0x6e, 0x61, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x6e, 0x61,
	0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x22, 0x3c, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x63, 0x70, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x70, 0x75, 0x22, 0xe5,
	0x03, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x46, 0x0a, 0x07, 0x64, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x28, 0x2e, 0x67, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x6e, 0x61, 0x70, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x42, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x06,
	0x64, 0x62, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x7f, 0x0a, 0x15, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x67, 0x69, 0x6e, 0x67, 0x65,
	0x72, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x0a, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x67, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65,
	0x66, 0x12, 0x5e, 0x0a, 0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x67, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x66, 0x52, 0x12, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x66, 0x1a, 0x47, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x64,
	0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x2a, 0x0a, 0x14, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x55, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x66,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc4, 0x04, 0x0a, 0x09, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x4a, 0x0a, 0x0a, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x69,
	0x6e, 0x67, 0x65, 0x72, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x79, 0x0a, 0x16, 0x65, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x67, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x6e, 0x61, 0x70,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x2e, 0x45, 0x61, 0x67, 0x65, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x65, 0x61, 0x67, 0x65, 0x72,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x73, 0x12, 0x76,
	0x0a, 0x15, 0x6c, 0x61, 0x7a, 0x79, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e,
	0x67, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x2e, 0x4c, 0x61, 0x7a, 0x79, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x12, 0x6c, 0x61, 0x7a, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x73, 0x1a, 0x7c, 0x0a, 0x18, 0x45, 0x61, 0x67, 0x65, 0x72, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x4a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x6e, 0x61, 0x70,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x61, 0x67, 0x65, 0x72, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x7a, 0x0a, 0x17, 0x4c, 0x61, 0x7a, 0x79, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x49, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x67, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4c, 0x61, 0x7a, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x2a, 0x2d, 0x0a, 0x13, 0x43, 0x61, 0x63, 0x68, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x4f, 0x43, 0x41, 0x4c,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x10, 0x01, 0x2a,
	0x3b, 0x0a, 0x06, 0x44, 0x42, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x4f, 0x53,
	0x54, 0x47, 0x52, 0x45, 0x53, 0x5f, 0x31, 0x34, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x59,
	0x53, 0x51, 0x4c, 0x5f, 0x38, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x51, 0x4c, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x32, 0x30, 0x31, 0x39, 0x10, 0x02, 0x42, 0x32, 0x0a, 0x2e,
	0x69, 0x6f, 0x2e, 0x67, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x6e, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x50, 0x01,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_config_cache_v1alpha1_cache_proto_rawDescOnce sync.Once
	file_config_cache_v1alpha1_cache_proto_rawDescData = file_config_cache_v1alpha1_cache_proto_rawDesc
)

func file_config_cache_v1alpha1_cache_proto_rawDescGZIP() []byte {
	file_config_cache_v1alpha1_cache_proto_rawDescOnce.Do(func() {
		file_config_cache_v1alpha1_cache_proto_rawDescData = protoimpl.X.CompressGZIP(file_config_cache_v1alpha1_cache_proto_rawDescData)
	})
	return file_config_cache_v1alpha1_cache_proto_rawDescData
}

var file_config_cache_v1alpha1_cache_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_config_cache_v1alpha1_cache_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_config_cache_v1alpha1_cache_proto_goTypes = []interface{}{
	(CacheDeploymentType)(0),       // 0: gingersnap.config.cache.v1alpha1.CacheDeploymentType
	(DBType)(0),                    // 1: gingersnap.config.cache.v1alpha1.DBType
	(*CacheSpec)(nil),              // 2: gingersnap.config.cache.v1alpha1.CacheSpec
	(*CacheDeploymentSpec)(nil),    // 3: gingersnap.config.cache.v1alpha1.CacheDeploymentSpec
	(*DBSyncerDeploymentSpec)(nil), // 4: gingersnap.config.cache.v1alpha1.DBSyncerDeploymentSpec
	(*Resources)(nil),              // 5: gingersnap.config.cache.v1alpha1.Resources
	(*ResourceQuantity)(nil),       // 6: gingersnap.config.cache.v1alpha1.ResourceQuantity
	(*DataSourceSpec)(nil),         // 7: gingersnap.config.cache.v1alpha1.DataSourceSpec
	(*LocalObjectReference)(nil),   // 8: gingersnap.config.cache.v1alpha1.LocalObjectReference
	(*ServiceRef)(nil),             // 9: gingersnap.config.cache.v1alpha1.ServiceRef
	(*CacheConf)(nil),              // 10: gingersnap.config.cache.v1alpha1.CacheConf
	nil,                            // 11: gingersnap.config.cache.v1alpha1.DataSourceSpec.ConnectionPropertiesEntry
	nil,                            // 12: gingersnap.config.cache.v1alpha1.CacheConf.EagerCacheRuleSpecsEntry
	nil,                            // 13: gingersnap.config.cache.v1alpha1.CacheConf.LazyCacheRuleSpecsEntry
	(*EagerCacheRuleSpec)(nil),     // 14: gingersnap.config.cache.v1alpha1.EagerCacheRuleSpec
	(*LazyCacheRuleSpec)(nil),      // 15: gingersnap.config.cache.v1alpha1.LazyCacheRuleSpec
}
var file_config_cache_v1alpha1_cache_proto_depIdxs = []int32{
	3,  // 0: gingersnap.config.cache.v1alpha1.CacheSpec.deployment:type_name -> gingersnap.config.cache.v1alpha1.CacheDeploymentSpec
	4,  // 1: gingersnap.config.cache.v1alpha1.CacheSpec.db_syncer:type_name -> gingersnap.config.cache.v1alpha1.DBSyncerDeploymentSpec
	7,  // 2: gingersnap.config.cache.v1alpha1.CacheSpec.data_source:type_name -> gingersnap.config.cache.v1alpha1.DataSourceSpec
	0,  // 3: gingersnap.config.cache.v1alpha1.CacheDeploymentSpec.type:type_name -> gingersnap.config.cache.v1alpha1.CacheDeploymentType
	5,  // 4: gingersnap.config.cache.v1alpha1.CacheDeploymentSpec.resources:type_name -> gingersnap.config.cache.v1alpha1.Resources
	5,  // 5: gingersnap.config.cache.v1alpha1.DBSyncerDeploymentSpec.resources:type_name -> gingersnap.config.cache.v1alpha1.Resources
	6,  // 6: gingersnap.config.cache.v1alpha1.Resources.requests:type_name -> gingersnap.config.cache.v1alpha1.ResourceQuantity
	6,  // 7: gingersnap.config.cache.v1alpha1.Resources.limits:type_name -> gingersnap.config.cache.v1alpha1.ResourceQuantity
	1,  // 8: gingersnap.config.cache.v1alpha1.DataSourceSpec.db_type:type_name -> gingersnap.config.cache.v1alpha1.DBType
	11, // 9: gingersnap.config.cache.v1alpha1.DataSourceSpec.connection_properties:type_name -> gingersnap.config.cache.v1alpha1.DataSourceSpec.ConnectionPropertiesEntry
	8,  // 10: gingersnap.config.cache.v1alpha1.DataSourceSpec.secret_ref:type_name -> gingersnap.config.cache.v1alpha1.LocalObjectReference
	9,  // 11: gingersnap.config.cache.v1alpha1.DataSourceSpec.service_provider_ref:type_name -> gingersnap.config.cache.v1alpha1.ServiceRef
	2,  // 12: gingersnap.config.cache.v1alpha1.CacheConf.cache_spec:type_name -> gingersnap.config.cache.v1alpha1.CacheSpec
	12, // 13: gingersnap.config.cache.v1alpha1.CacheConf.eager_cache_rule_specs:type_name -> gingersnap.config.cache.v1alpha1.CacheConf.EagerCacheRuleSpecsEntry
	13, // 14: gingersnap.config.cache.v1alpha1.CacheConf.lazy_cache_rule_specs:type_name -> gingersnap.config.cache.v1alpha1.CacheConf.LazyCacheRuleSpecsEntry
	14, // 15: gingersnap.config.cache.v1alpha1.CacheConf.EagerCacheRuleSpecsEntry.value:type_name -> gingersnap.config.cache.v1alpha1.EagerCacheRuleSpec
	15, // 16: gingersnap.config.cache.v1alpha1.CacheConf.LazyCacheRuleSpecsEntry.value:type_name -> gingersnap.config.cache.v1alpha1.LazyCacheRuleSpec
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_config_cache_v1alpha1_cache_proto_init() }
func file_config_cache_v1alpha1_cache_proto_init() {
	if File_config_cache_v1alpha1_cache_proto != nil {
		return
	}
	file_config_cache_v1alpha1_rules_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_config_cache_v1alpha1_cache_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CacheSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_cache_v1alpha1_cache_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CacheDeploymentSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_cache_v1alpha1_cache_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBSyncerDeploymentSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_cache_v1alpha1_cache_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_cache_v1alpha1_cache_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceQuantity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_cache_v1alpha1_cache_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSourceSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_cache_v1alpha1_cache_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalObjectReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_cache_v1alpha1_cache_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_cache_v1alpha1_cache_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CacheConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_config_cache_v1alpha1_cache_proto_msgTypes[5].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_config_cache_v1alpha1_cache_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_config_cache_v1alpha1_cache_proto_goTypes,
		DependencyIndexes: file_config_cache_v1alpha1_cache_proto_depIdxs,
		EnumInfos:         file_config_cache_v1alpha1_cache_proto_enumTypes,
		MessageInfos:      file_config_cache_v1alpha1_cache_proto_msgTypes,
	}.Build()
	File_config_cache_v1alpha1_cache_proto = out.File
	file_config_cache_v1alpha1_cache_proto_rawDesc = nil
	file_config_cache_v1alpha1_cache_proto_goTypes = nil
	file_config_cache_v1alpha1_cache_proto_depIdxs = nil
}
