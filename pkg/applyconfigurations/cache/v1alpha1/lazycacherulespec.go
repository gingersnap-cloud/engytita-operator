// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// LazyCacheRuleSpecApplyConfiguration represents an declarative configuration of the LazyCacheRuleSpec type for use
// with apply.
type LazyCacheRuleSpecApplyConfiguration struct {
	CacheRef *NamespacedObjectReferenceApplyConfiguration `json:"cache_ref,omitempty"`
	Query    *string                                      `json:"query,omitempty"`
	Value    *ValueApplyConfiguration                     `json:"value,omitempty"`
}

// LazyCacheRuleSpecApplyConfiguration constructs an declarative configuration of the LazyCacheRuleSpec type for use with
// apply.
func LazyCacheRuleSpec() *LazyCacheRuleSpecApplyConfiguration {
	return &LazyCacheRuleSpecApplyConfiguration{}
}

// WithCacheRef sets the CacheRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CacheRef field is set to the value of the last call.
func (b *LazyCacheRuleSpecApplyConfiguration) WithCacheRef(value *NamespacedObjectReferenceApplyConfiguration) *LazyCacheRuleSpecApplyConfiguration {
	b.CacheRef = value
	return b
}

// WithQuery sets the Query field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Query field is set to the value of the last call.
func (b *LazyCacheRuleSpecApplyConfiguration) WithQuery(value string) *LazyCacheRuleSpecApplyConfiguration {
	b.Query = &value
	return b
}

// WithValue sets the Value field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Value field is set to the value of the last call.
func (b *LazyCacheRuleSpecApplyConfiguration) WithValue(value *ValueApplyConfiguration) *LazyCacheRuleSpecApplyConfiguration {
	b.Value = value
	return b
}
