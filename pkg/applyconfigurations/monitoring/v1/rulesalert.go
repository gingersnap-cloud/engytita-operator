// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// RulesAlertApplyConfiguration represents an declarative configuration of the RulesAlert type for use
// with apply.
type RulesAlertApplyConfiguration struct {
	ForOutageTolerance *string `json:"forOutageTolerance,omitempty"`
	ForGracePeriod     *string `json:"forGracePeriod,omitempty"`
	ResendDelay        *string `json:"resendDelay,omitempty"`
}

// RulesAlertApplyConfiguration constructs an declarative configuration of the RulesAlert type for use with
// apply.
func RulesAlert() *RulesAlertApplyConfiguration {
	return &RulesAlertApplyConfiguration{}
}

// WithForOutageTolerance sets the ForOutageTolerance field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ForOutageTolerance field is set to the value of the last call.
func (b *RulesAlertApplyConfiguration) WithForOutageTolerance(value string) *RulesAlertApplyConfiguration {
	b.ForOutageTolerance = &value
	return b
}

// WithForGracePeriod sets the ForGracePeriod field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ForGracePeriod field is set to the value of the last call.
func (b *RulesAlertApplyConfiguration) WithForGracePeriod(value string) *RulesAlertApplyConfiguration {
	b.ForGracePeriod = &value
	return b
}

// WithResendDelay sets the ResendDelay field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ResendDelay field is set to the value of the last call.
func (b *RulesAlertApplyConfiguration) WithResendDelay(value string) *RulesAlertApplyConfiguration {
	b.ResendDelay = &value
	return b
}
