// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// ServiceBindingSpecApplyConfiguration represents an declarative configuration of the ServiceBindingSpec type for use
// with apply.
type ServiceBindingSpecApplyConfiguration struct {
	Name                   *string                        `json:"name,omitempty"`
	NamingStrategy         *string                        `json:"namingStrategy,omitempty"`
	Mappings               []MappingApplyConfiguration    `json:"mappings,omitempty"`
	Services               []ServiceApplyConfiguration    `json:"services,omitempty"`
	Application            *ApplicationApplyConfiguration `json:"application,omitempty"`
	DetectBindingResources *bool                          `json:"detectBindingResources,omitempty"`
	BindAsFiles            *bool                          `json:"bindAsFiles,omitempty"`
}

// ServiceBindingSpecApplyConfiguration constructs an declarative configuration of the ServiceBindingSpec type for use with
// apply.
func ServiceBindingSpec() *ServiceBindingSpecApplyConfiguration {
	return &ServiceBindingSpecApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *ServiceBindingSpecApplyConfiguration) WithName(value string) *ServiceBindingSpecApplyConfiguration {
	b.Name = &value
	return b
}

// WithNamingStrategy sets the NamingStrategy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NamingStrategy field is set to the value of the last call.
func (b *ServiceBindingSpecApplyConfiguration) WithNamingStrategy(value string) *ServiceBindingSpecApplyConfiguration {
	b.NamingStrategy = &value
	return b
}

// WithMappings adds the given value to the Mappings field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Mappings field.
func (b *ServiceBindingSpecApplyConfiguration) WithMappings(values ...*MappingApplyConfiguration) *ServiceBindingSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithMappings")
		}
		b.Mappings = append(b.Mappings, *values[i])
	}
	return b
}

// WithServices adds the given value to the Services field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Services field.
func (b *ServiceBindingSpecApplyConfiguration) WithServices(values ...*ServiceApplyConfiguration) *ServiceBindingSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithServices")
		}
		b.Services = append(b.Services, *values[i])
	}
	return b
}

// WithApplication sets the Application field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Application field is set to the value of the last call.
func (b *ServiceBindingSpecApplyConfiguration) WithApplication(value *ApplicationApplyConfiguration) *ServiceBindingSpecApplyConfiguration {
	b.Application = value
	return b
}

// WithDetectBindingResources sets the DetectBindingResources field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DetectBindingResources field is set to the value of the last call.
func (b *ServiceBindingSpecApplyConfiguration) WithDetectBindingResources(value bool) *ServiceBindingSpecApplyConfiguration {
	b.DetectBindingResources = &value
	return b
}

// WithBindAsFiles sets the BindAsFiles field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BindAsFiles field is set to the value of the last call.
func (b *ServiceBindingSpecApplyConfiguration) WithBindAsFiles(value bool) *ServiceBindingSpecApplyConfiguration {
	b.BindAsFiles = &value
	return b
}
