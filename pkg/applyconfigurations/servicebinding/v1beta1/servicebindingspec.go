// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

// ServiceBindingSpecApplyConfiguration represents an declarative configuration of the ServiceBindingSpec type for use
// with apply.
type ServiceBindingSpecApplyConfiguration struct {
	Name     *string                                            `json:"name,omitempty"`
	Type     *string                                            `json:"type,omitempty"`
	Provider *string                                            `json:"provider,omitempty"`
	Workload *ServiceBindingWorkloadReferenceApplyConfiguration `json:"workload,omitempty"`
	Service  *ServiceBindingServiceReferenceApplyConfiguration  `json:"service,omitempty"`
	Env      []EnvMappingApplyConfiguration                     `json:"env,omitempty"`
}

// ServiceBindingSpecApplyConfiguration constructs an declarative configuration of the ServiceBindingSpec type for use with
// apply.
func ServiceBindingSpec() *ServiceBindingSpecApplyConfiguration {
	return &ServiceBindingSpecApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *ServiceBindingSpecApplyConfiguration) WithName(value string) *ServiceBindingSpecApplyConfiguration {
	b.Name = &value
	return b
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *ServiceBindingSpecApplyConfiguration) WithType(value string) *ServiceBindingSpecApplyConfiguration {
	b.Type = &value
	return b
}

// WithProvider sets the Provider field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Provider field is set to the value of the last call.
func (b *ServiceBindingSpecApplyConfiguration) WithProvider(value string) *ServiceBindingSpecApplyConfiguration {
	b.Provider = &value
	return b
}

// WithWorkload sets the Workload field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Workload field is set to the value of the last call.
func (b *ServiceBindingSpecApplyConfiguration) WithWorkload(value *ServiceBindingWorkloadReferenceApplyConfiguration) *ServiceBindingSpecApplyConfiguration {
	b.Workload = value
	return b
}

// WithService sets the Service field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Service field is set to the value of the last call.
func (b *ServiceBindingSpecApplyConfiguration) WithService(value *ServiceBindingServiceReferenceApplyConfiguration) *ServiceBindingSpecApplyConfiguration {
	b.Service = value
	return b
}

// WithEnv adds the given value to the Env field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Env field.
func (b *ServiceBindingSpecApplyConfiguration) WithEnv(values ...*EnvMappingApplyConfiguration) *ServiceBindingSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithEnv")
		}
		b.Env = append(b.Env, *values[i])
	}
	return b
}
